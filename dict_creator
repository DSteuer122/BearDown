import hl7

def name_parse(name_string):
    parts = name_string.split("^")  # Split by '^'
    first = parts[0] if len(parts) > 0 else None
    second = parts[1] if len(parts) > 1 else None
    return first, second

def parse_hl7_messages(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        data = file.read()
    
    messages = ["MSH|" + msg.strip().replace('\n', '\r') for msg in data.split('MSH|') if msg.strip()]
    return messages

def extract_unique_patients(input_file, output_file):
    messages = parse_hl7_messages(input_file)
    patient_dict = {}  # Dictionary to store unique patients
    
    for message in messages:
        h = hl7.parse(message)
        for segment in h:
            if str(segment[0]).strip() == 'PID':
                lname, fname = name_parse(str(segment[5]))
                birthdate = str(segment[7]).strip()
                hphone = str(segment[13]).strip()
                bphone = str(segment[14]).strip()
                SSN = str(segment[19]).strip() if len(segment) > 19 else ''
                AcctN = str(segment[18]).strip()

                # Get MRN or fallback key if MRN is missing
                mrn = str(segment[4]).strip() if len(segment) > 4 else ''
                patient_key = mrn if mrn else f"{lname}_{fname}_{birthdate}"

                new_data = {
                    "mrn": mrn,
                    "first name": fname,
                    "last name": lname,
                    "birthdate": birthdate,
                    "hphone": hphone,
                    "bphone": bphone,
                    "SSN": SSN,
                    "AcctN": AcctN
                }

                # Check if the patient already exists in dictionary and merge data
                if patient_key in patient_dict:
                    existing_data = patient_dict[patient_key]
                    for key, value in new_data.items():
                        if value and not existing_data.get(key):
                            existing_data[key] = value
                else:
                    # Check if a patient with the name exists (keyed by the name)
                    name_key = f"{lname}_{fname}_{birthdate}"
                    if name_key in patient_dict:
                        # If the name-based key exists, delete it before adding the MRN-based entry
                        del patient_dict[name_key]
                    patient_dict[patient_key] = new_data

    # Write unique patient keys to the output file
    with open(output_file, 'w', encoding='utf-8') as file:
        for key in patient_dict:
            file.write(key + '\n')
            
    return patient_dict

# Call the function to write to "output.txt"
patient_dict = extract_unique_patients('raw.txt', 'output.txt')

import json
with open('result.json', 'w') as fp:
    json.dump(patient_dict, fp, indent=4)
