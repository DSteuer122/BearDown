import hl7
import re
import RandomGenerator as RG
import json
import datetime
from difflib import SequenceMatcher

def filter_messages_with_mrn(input_file, output_file):
    """
    Parses through raw.txt, removes messages without an MRN in PID.3,
    and writes the filtered messages to a new file.
    
    Args:
        input_file (str): Path to the input HL7 file
        output_file (str): Path to write filtered messages
        
    Returns:
        str: Path to the filtered output file
    """
    messages = parse_hl7_messages(input_file)
    filtered_messages = []
    
    for message in messages:
        h = hl7.parse(message)
        has_mrn = False
        
        for segment in h:
            if str(segment[0]).strip() == 'PID':
                mrn_field = str(segment[3]).strip()
                # Check if MRN field exists and is not empty
                if len(mrn_field) > 0:
                    has_mrn = True
                break
        
        if has_mrn:
            filtered_messages.append(message)
    
    # Write filtered messages to output file
    with open(output_file, 'w', encoding='utf-8') as f:
        for msg in filtered_messages:
            f.write(msg + "\n")
    
    print(f"Filtered {len(messages) - len(filtered_messages)} messages without MRN. "
          f"{len(filtered_messages)} messages remaining.")
    return output_file

def normalize_date(date_string):
    """
    Parse and normalize different date formats to a standard YYYYMMDD format.
    Enhanced to handle textual month formats like 'May 5, 1990'.
    """
    if not date_string:
        return None
        
    # Store original for comparison
    original = date_string
    # Strip whitespace and normalize separators
    cleaned = re.sub(r'[^\w\s,]', ' ', date_string.strip()).strip()
    
    # Standard datetime formats
    formats = [
        '%Y%m%d',           # 19900505
        '%m/%d/%Y',        # 05/05/1990
        '%d/%m/%Y',        # 05/05/1990
        '%Y/%m/%d',        # 1990/05/05
        '%m-%d-%Y',        # 05-05-1990
        '%d-%m-%Y',        # 05-05-1990
        '%Y-%m-%d',        # 1990-05-05
        '%m.%d.%Y',        # 05.05.1990
        '%d.%m.%Y',        # 05.05.1990
        '%Y.%m.%d',        # 1990.05.05
        '%m/%d/%y',        # 05/05/90
        '%d/%m/%y',        # 05/05/90
        '%y/%m/%d',        # 90/05/05
        '%m-%d-%y',        # 05-05-90
        '%d-%m-%y',        # 05-05-90
        '%y-%m-%d',        # 90-05-05
    ]
    
    # Try standard formats first
    for fmt in formats:
        try:
            date_obj = datetime.datetime.strptime(cleaned, fmt)
            return date_obj.strftime('%Y%m%d')
        except ValueError:
            continue
    
    # Enhanced handling for textual months (e.g., "May 5, 1990")
    month_map = {
        'jan': 1, 'january': 1, 'feb': 2, 'february': 2, 'mar': 3, 'march': 3,
        'apr': 4, 'april': 4, 'may': 5, 'jun': 6, 'june': 6, 'jul': 7, 'july': 7,
        'aug': 8, 'august': 8, 'sep': 9, 'sept': 9, 'september': 9, 
        'oct': 10, 'october': 10, 'nov': 11, 'november': 11, 'dec': 12, 'december': 12
    }
    
    # Pattern for textual months: "May 5, 1990", "5 May 1990", "May 5 1990", etc.
    textual_pattern = r'([A-Za-z]+)\s+(\d{1,2})[,\s]+(\d{4})|(\d{1,2})\s+([A-Za-z]+)[,\s]+(\d{4})'
    match = re.search(textual_pattern, cleaned, re.IGNORECASE)
    if match:
        groups = match.groups()
        if groups[0]:  # Month Day, Year format
            month_str, day, year = groups[0], groups[1], groups[2]
        else:  # Day Month Year format
            day, month_str, year = groups[3], groups[4], groups[5]
        
        month_str = month_str.lower()
        month = month_map.get(month_str) or month_map.get(month_str[:3])
        if month and day and year:
            try:
                date_obj = datetime.datetime(int(year), month, int(day))
                return date_obj.strftime('%Y%m%d')
            except ValueError:
                pass
    
    # Numeric pattern: "19900505"
    match = re.search(r'(\d{4})(\d{2})(\d{2})', cleaned)
    if match:
        year, month, day = match.groups()
        try:
            date_obj = datetime.datetime(int(year), int(month), int(day))
            return date_obj.strftime('%Y%m%d')
        except ValueError:
            pass
    
    # Numeric pattern with separators: "05/05/1990" or "05-05-1990"
    match = re.search(r'(\d{1,2})[^\d]+(\d{1,2})[^\d]+(\d{4})', cleaned)
    if match:
        for month_idx, day_idx in [(0, 1), (1, 0)]:  # Try both MM/DD/YYYY and DD/MM/YYYY
            try:
                month = int(match.group(month_idx + 1))
                day = int(match.group(day_idx + 1))
                year = int(match.group(3))
                date_obj = datetime.datetime(year, month, day)
                return date_obj.strftime('%Y%m%d')
            except ValueError:
                continue
    
    # If all parsing attempts fail, return the original string
    return date_string

def is_same_date(date1, date2):
    """
    Determine if two dates in different formats refer to the same actual date.
    """
    norm_date1 = normalize_date(date1)
    norm_date2 = normalize_date(date2)
    
    return norm_date1 == norm_date2

def name_parse(name_string):
    parts = name_string.split("^")  # Split by '^'
    first = parts[1] if len(parts) > 1 else None
    last = parts[0] if len(parts) > 0 else None
    return last, first

def parse_hl7_messages(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        data = file.read()
    
    messages = ["MSH|" + msg.strip().replace('\n', '\r') for msg in data.split('MSH|') if msg.strip()]
    return messages

def parse_identifiers25(input_str):
    pattern = r"(W\d+)\^\^\^UAReg\^(MR|PI|AN|SS)"
    matches = re.findall(pattern, input_str)
    parsed_data = {value: code for code, value in matches}
    return parsed_data

def parse_identifiers24(input_str):
    pattern = r"([A\d-]+)\^\^\^\^([A-Z]+)\^HOST_VW"
    matches = re.findall(pattern, input_str)
    parsed_data = {code: identifier for identifier, code in matches}
    return parsed_data

def parselist(h):
    vID = "2.4"  # Default value
    PFI = {}
    
    for segment in h:
        if str(segment[0]).strip() == 'MSH':
            vID = str(segment[12]).strip()
    
    if vID == '2.5':
        for segment in h:
            if str(segment[0]).strip() == 'PID':
                PFI_str = str(segment[3]).strip()  
                PFI = parse_identifiers25(PFI_str)
    elif vID == '2.4':
        for segment in h:
            if str(segment[0]).strip() == 'PID':
                PFI_str = str(segment[3]).strip()  
                PFI = parse_identifiers24(PFI_str)
    
    return PFI

def extract_state(address_str):
    fields = address_str.split('^')
    if len(fields) > 3:
        return fields[3]
    return None 

def create_patient_key(mrn, lname, fname, birthdate, ssn):
    """
    Creates a unique key for patient identification with fallbacks for missing MRN.
    Uses a hierarchy of identifiers.
    """
    if mrn and mrn.strip():
        return mrn.strip()
    elif ssn and ssn.strip():
        return ssn.strip()
    elif lname and fname and birthdate:
        return f"{lname.strip()}_{fname.strip()}_{birthdate.strip()}"
    else:
        # Generate a unique placeholder key for truly incomplete records
        # Include whatever we have
        parts = []
        if lname: parts.append(f"L_{lname.strip()}")
        if fname: parts.append(f"F_{fname.strip()}")
        if birthdate: parts.append(f"DOB_{birthdate.strip()}")
        if not parts:
            # Truly no identifying info - extremely rare but possible
            return f"UNKNOWN_{hash(str(lname) + str(fname) + str(birthdate) + str(ssn))}"
        return "_".join(parts)

def split_message_lines(message):
    """
    Splits the HL7 message into lines and then delimits each line by '|'.
    """
    lines = message.splitlines()
    parsed_lines = [line.split('|') for line in lines]
    return parsed_lines

def replace_first_two_entries(hl7_field, new_first, new_second):
    """
    Replaces the first two entries in an HL7 field that is delimited by '^'.
    """
    components = hl7_field.split("^")
    
    if len(components) >= 2:
        components[0] = new_first
        components[1] = new_second
    elif len(components) == 1:
        components[0] = new_first
        components.append(new_second)
    else:
        components = [new_first, new_second]
    
    return "^".join(components)

def extract_patient_data(segment):
    """
    Extracts patient data from a PID segment.
    """
    lname, fname = name_parse(str(segment[5]))
    birthdate = str(segment[7]).strip()
    hphone = str(segment[13]).strip()
    bphone = str(segment[14]).strip()
    SSN = str(segment[19]).strip() if len(segment) > 19 else ''
    AcctN = str(segment[18]).strip()
    state = extract_state(str(segment[11]).strip())
    address = str(segment[11]).strip()
    mrn = str(segment[3]).strip()
    
    return {
        "mrn": mrn,
        "first_name": fname,
        "last_name": lname,
        "birthdate": birthdate,
        "hphone": hphone,
        "bphone": bphone,
        "SSN": SSN,
        "AcctN": AcctN,
        "state": state,
        "address": address
    }

def find_matching_patient(patient_data, patient_dict):
    """
    Finds a matching patient in the dictionary using exact matching.
    Returns the matching key if found, None otherwise.
    """
    # First check MRN
    if patient_data["mrn"] and any(key.startswith(f"MRN_{patient_data['mrn']}") for key in patient_dict):
        for key in patient_dict:
            if key.startswith(f"MRN_{patient_data['mrn']}"):
                return key
    
    # Check SSN
    if patient_data["SSN"] and any(key.startswith(f"SSN_{patient_data['SSN']}") for key in patient_dict):
        for key in patient_dict:
            if key.startswith(f"SSN_{patient_data['SSN']}"):
                return key
    
    # Check name + DOB with exact matching
    if patient_data["last_name"] and patient_data["first_name"] and patient_data["birthdate"]:
        name_dob_key = f"NAME_{patient_data['last_name'].strip()}_{patient_data['first_name'].strip()}_{normalize_date(patient_data['birthdate']).strip()}"
        for key in patient_dict:
            if key == name_dob_key:
                return key
                
    return None
def extract_unique_patients(input_file, output_file):
    """
    Extracts unique patients from HL7 messages and creates a mapping file.
    Handles missing MRNs by using alternative identifiers.
    Uses exact matching instead of fuzzy matching.
    Randomizes GT1 (Guarantor) and NK1 (Next of Kin) names, ensuring consistency
    when GT1 and NK1 refer to the same person, while assigning unique names
    to multiple NK1s or GT1s.
    """
    messages = parse_hl7_messages(input_file)
    patient_dict = {}  # Dictionary to store unique patients
    message_to_patient_map = {}  # Maps message index to patient key
    gt1_nk1_dict = {}  # Stores fake names for GT1 and NK1 to ensure consistency

    # First pass: extract patient data and create a mapping
    for message_idx, message in enumerate(messages):
        h = hl7.parse(message)
        patient_data = None

        for segment in h:
            segment_type = str(segment[0]).strip()

            if segment_type == 'PID':
                # Extract patient data
                patient_data = extract_patient_data(segment)
                mrn = patient_data["mrn"]
                
                # Handle complex PID.3 cases
                if len(mrn) > 15:
                    PFIlist = parselist(h)
                    if isinstance(PFIlist, dict):
                        if 'MR' in PFIlist:
                            patient_data["mrn"] = PFIlist['MR']
                            mrn = PFIlist['MR']
                        if 'AN' in PFIlist:
                            patient_data["AcctN"] = PFIlist['AN']
                        if 'SS' in PFIlist:
                            patient_data["SSN"] = PFIlist['SS']
                
                # Normalize the birthdate
                patient_data["birthdate"] = normalize_date(patient_data["birthdate"]) or patient_data["birthdate"]
                
                # Create a patient key based on available identifiers
                patient_key = create_patient_key(
                    patient_data["mrn"], 
                    patient_data["last_name"], 
                    patient_data["first_name"], 
                    patient_data["birthdate"], 
                    patient_data["SSN"]
                )
                
                # Check if a similar patient already exists
                existing_key = find_matching_patient(patient_data, patient_dict)
                
                if existing_key:
                    # Use the existing patient key
                    patient_key = existing_key
                    # Merge the data with the existing patient record
                    existing_data = patient_dict[existing_key]
                    for key, value in patient_data.items():
                        if value and not existing_data.get(key):
                            existing_data[key] = value
                else:
                    # This is a new patient
                    # Generate fake data for this patient
                    fake_MRN = RG.generate_MRN()
                    fake_lname, fake_fname = RG.generate_unique_fake_name()
                    fake_birthdate = RG.generate_fake_birthday(patient_data["birthdate"])
                    fake_hphone = RG.generate_phone_number()
                    fake_bphone = RG.generate_phone_number()
                    fake_SSN = RG.generate_SSN()
                    fake_AcctN = RG.generate_account_number()
                    fake_Address = RG.generate_random_address(patient_data["state"])
                    
                    # Add fake data to patient record
                    patient_data.update({
                        "fake_mrn": fake_MRN,
                        "fake_first_name": fake_fname,
                        "fake_last_name": fake_lname,
                        "fake_birthdate": fake_birthdate,
                        "fake_hphone": fake_hphone,
                        "fake_bphone": fake_bphone,
                        "fake_SSN": fake_SSN,
                        "fake_AcctN": fake_AcctN,
                        "fake_Address": fake_Address
                    })
                    
                    patient_dict[patient_key] = patient_data
                
                # Map this message to the patient key
                message_to_patient_map[message_idx] = patient_key

            elif segment_type in ['GT1', 'NK1']:
                # Extract name from the GT1 or NK1 segment
                name_field = str(segment[2]).strip()  # Usually field 2 for both GT1 and NK1
                lname, fname = name_parse(name_field)

                # Ensure GT1 and NK1 get the same fake name if they match
                if name_field in gt1_nk1_dict:
                    fake_lname, fake_fname = gt1_nk1_dict[name_field]
                else:
                    fake_lname, fake_fname = RG.generate_unique_fake_name()
                    fake_lname2, fake_fname2 = RG.generate_unique_fake_name()
                    gt1_nk1_dict[name_field] = (fake_lname, fake_fname)

                # Assign fake GT1/NK1 names to the patient dictionary
                if segment_type == 'GT1':
                    patient_dict[patient_key]["fake_GT1_first_name"] = fake_fname
                    patient_dict[patient_key]["fake_GT1_last_name"] = fake_lname
                elif segment_type == 'NK1':
                    patient_dict[patient_key]["fake_NK1_first_name"] = fake_fname
                    patient_dict[patient_key]["fake_NK1_last_name"] = fake_lname
                    patient_dict[patient_key]["fake_NK2_first_name"] = fake_fname2
                    patient_dict[patient_key]["fake_NK2_last_name"] = fake_lname2

    # Write unique patient keys to the output file
    with open(output_file, 'w', encoding='utf-8') as file:
        for key in patient_dict:
            file.write(key + '\n')
    
    # Save the complete patient dictionary
    with open('result.json', 'w', encoding='utf-8') as fp:
        json.dump(patient_dict, fp, indent=4)
    
    return patient_dict, message_to_patient_map
def sanitize_non_pid_segment(segment_text, patient_data):
    """
    Sanitizes non-PID segments by replacing any occurrences of sensitive patient data
    with a single asterisk. Uses exact matches only.
    
    Args:
        segment_text (str): Text of the segment to be sanitized
        patient_data (dict): Dictionary containing patient sensitive data
        
    Returns:
        str: Sanitized segment text
    """
    # List of sensitive data fields to check for
    sensitive_data = [
        patient_data.get("first_name", ""),
        patient_data.get("last_name", ""),
        patient_data.get("SSN", ""),
        patient_data.get("mrn", ""),
        patient_data.get("birthdate", ""),
        patient_data.get("AcctN", ""),
        patient_data.get("hphone", ""),
        patient_data.get("bphone", "")
    ]
    
    # Filter out empty values and sort by length (longest first) to prevent partial matches
    sensitive_data = [data for data in sensitive_data if data and len(data) > 2]
    sensitive_data.sort(key=len, reverse=True)
    
    # Replace each sensitive data with an asterisk
    sanitized_text = segment_text
    
    # Handle exact matches
    for data in sensitive_data:
        sanitized_text = re.sub(re.escape(data), "*", sanitized_text)
    
    # Check for date in various formats
    birthdate = patient_data.get("birthdate", "")
    if birthdate and len(birthdate) > 5:
        # Extract all potential dates from the segment
        # Common date patterns
        date_patterns = [
            r'\d{1,2}[-/\.]\d{1,2}[-/\.]\d{2,4}',  # MM/DD/YYYY, DD/MM/YYYY, etc.
            r'\d{4}[-/\.]\d{1,2}[-/\.]\d{1,2}',    # YYYY/MM/DD, etc.
            r'\d{8}',                               # YYYYMMDD
            r'[A-Za-z]{3,9}\s+\d{1,2},?\s+\d{4}',  # Month DD, YYYY
            r'\d{1,2}\s+[A-Za-z]{3,9},?\s+\d{4}'   # DD Month, YYYY
        ]
        
        for pattern in date_patterns:
            potential_dates = re.findall(pattern, sanitized_text)
            for date_str in potential_dates:
                if is_same_date(date_str, birthdate):
                    sanitized_text = sanitized_text.replace(date_str, "*")
    
    return sanitized_text
def replace_identifiers24(input_string, mr_id, ssn):
    modified_string = re.sub(r"A\d+", mr_id, input_string, count=1)
    modified_string = re.sub(r"\d{3}-\d{2}-\d{4}", ssn, modified_string, count=1)
    return modified_string
def replace_identifiers25(input_string, first_id, third_id):
    """
    Replaces the first and third numeric identifiers in the given string with variables using regex.
    
    :param input_string: The input string containing identifiers.
    :param first_id: The new first identifier to replace the existing one.
    :param third_id: The new third identifier to replace the existing one.
    :return: The modified string with updated identifiers.
    """
    matches = re.findall(r"W\d+", input_string)
    if len(matches) >= 3:
        modified_string = input_string.replace(matches[0], first_id, 1)
        modified_string = modified_string.replace(matches[2], third_id, 1)
        return modified_string
    return input_string

def compile(input_file, patient_dict, message_map, output_file):
    """
    Compiles modified HL7 messages using the patient dictionary and message mapping.
    """
    messages = parse_hl7_messages(input_file)
    modified_messages = []
    doctor_dict = {}
    
    for message_idx, message in enumerate(messages):
        h = hl7.parse(message)
        modified_message = message
        vID = ''
        if message_idx in message_map:
            patient_key = message_map[message_idx]
            patient_data = patient_dict[patient_key]
            
            # Process each segment in the message
            for segment_idx, segment in enumerate(h):
                segment_type = str(segment[0]).strip()
                
                if segment_type == 'MSH':
                    vID = str(segment[12]).strip()
                if segment_type == 'PV1':
                    # Handle PV1 segment (doctor information)
                    name_string = str(segment[7])
                    if name_string not in doctor_dict:
                        lname, fname = RG.generate_unique_fake_name()
                        docID = ''
                        if len(lname)>3 and len(lname) > 2:
                            docID = (lname[:3] + fname[:2]).upper()
                        elif len(lname) > 4:
                            docID = lname[:4].lower() 
                        doctor_dict[name_string] = f"{docID}^{lname}^{fname}^^^^MD"
                    name_string1 = str(segment[8])
                    if name_string1 not in doctor_dict:
                        lname, fname = RG.generate_unique_fake_name()
                        docID = ''
                        if len(lname)>3 and len(lname) > 2:
                            docID = (lname[:3] + fname[:2]).upper()
                        elif len(lname) > 4:
                            docID = lname[:4].lower() 
                        doctor_dict[name_string1] = f"{docID}^{lname}^{fname}^^^^MD"
                    name_string2 = str(segment[9])
                    if name_string2 not in doctor_dict:
                        lname, fname = RG.generate_unique_fake_name()
                        docID = ''
                        if len(lname)>3 and len(lname) > 2:
                            docID = (lname[:3] + fname[:2]).upper()
                        elif len(lname) > 4:
                            docID = lname[:4].lower() 
                        doctor_dict[name_string2] = f"{docID}^{lname}^{fname}^^^^MD"
                    List = split_message_lines(str(segment))
                    
                    if len(List)>0 and len(List[0]) > 7:
                        if List[0][7] != '':
                            List[0][7] = doctor_dict[name_string]
                        if List[0][8] != '':
                            List[0][8] = doctor_dict[name_string1]
                        if List[0][9] != '':
                            List[0][9] = doctor_dict[name_string2]   
                    modified_pv1 = '|'.join(List[0])
                    
                    # Replace PID segment in the message
                    modified_message = modified_message.replace(str(segment), modified_pv1, 1)   
        
                if segment_type == 'PID':
                    # Handle PID segments as before
                    List = split_message_lines(str(segment))
                    if vID == '2.4':
                        if len(List) > 0 and len(List[0]) > 3:
                            # Replace fields with anonymized data
                            if List[0][3] != '':
                                List[0][3] = replace_identifiers24(List[0][3],patient_data['fake_mrn'], patient_data['fake_SSN'])
                                print(List[0][3])
                            if List[0][5] != '':
                                List[0][5] = replace_first_two_entries(
                                    List[0][5], 
                                    patient_data['fake_last_name'].lower(), 
                                    patient_data['fake_first_name'].lower()
                                )
                            if List[0][7] != '':
                                List[0][7] = patient_data["fake_birthdate"]
                            if List[0][11] != '' and List[0][11] != '^^^^^^^^':
                                List[0][11] = patient_data["fake_Address"]
                            if List[0][13] != '':
                                List[0][13] = patient_data["fake_hphone"]
                            if List[0][14] != '':
                                List[0][14] = patient_data["fake_bphone"]
                            if List[0][18] != '':
                                List[0][18] = patient_data["fake_AcctN"]
                            if len(List[0]) > 19 and List[0][19] != '':
                                List[0][19] = patient_data["fake_SSN"]
                    if vID == '2.5':
                        if len(List) > 0 and len(List[0]) > 3:
                            # Replace fields with anonymized data
                            if List[0][3] != '':
                                List[0][3] = replace_identifiers25(List[0][3],patient_data['fake_mrn'], patient_data['fake_AcctN'])
                                print(List[0][3])
                            if List[0][5] != '':
                                List[0][5] = replace_first_two_entries(
                                    List[0][5], 
                                    patient_data['fake_last_name'].lower(), 
                                    patient_data['fake_first_name'].lower()
                                )
                            if List[0][7] != '':
                                List[0][7] = patient_data["fake_birthdate"]
                            if List[0][11] != '' and List[0][11] != '^^^^^^^^':
                                List[0][11] = patient_data["fake_Address"]
                            if List[0][13] != '':
                                List[0][13] = patient_data["fake_hphone"]
                            if List[0][14] != '':
                                List[0][14] = patient_data["fake_bphone"]
                            if List[0][18] != '':
                                List[0][18] = patient_data["fake_AcctN"]
                            if len(List[0]) > 19 and List[0][19] != '':
                                List[0][19] = patient_data["fake_SSN"] 
                    else:
                        if len(List) > 0 and len(List[0]) > 3:
                            # Replace fields with anonymized data
                            if List[0][3] != '':
                                List[0][3] = patient_data["fake_mrn"]
                            if List[0][5] != '':
                                List[0][5] = replace_first_two_entries(
                                    List[0][5], 
                                    patient_data['fake_last_name'].lower(), 
                                    patient_data['fake_first_name'].lower()
                                )
                            if List[0][7] != '':
                                List[0][7] = patient_data["fake_birthdate"]
                            if List[0][11] != '' and List[0][11] != '^^^^^^^^':
                                List[0][11] = patient_data["fake_Address"]
                            if List[0][13] != '':
                                List[0][13] = patient_data["fake_hphone"]
                            if List[0][14] != '':
                                List[0][14] = patient_data["fake_bphone"]
                            if List[0][18] != '':
                                List[0][18] = patient_data["fake_AcctN"]
                            if len(List[0]) > 19 and List[0][19] != '':
                                List[0][19] = patient_data["fake_SSN"]
                    
                    # Reconstruct the modified PID segment
                    modified_pid = '|'.join(List[0])
                    
                    # Replace PID segment in the message
                    modified_message = modified_message.replace(str(segment), modified_pid, 1)
                
                if segment_type == 'NK1':
                    
                    # Process all NK1 segments separately, using different names for each
                    List = split_message_lines(str(segment))
                    ognk = List[0][2].strip()
                    nk1_index = List[0][1].strip()  # Unique ID based on segment position
                    # Assign unique fake names for each NK1 segment
                    if nk1_index == '1':
                        nk1_first_name = patient_data['fake_NK1_first_name']
                        nk1_last_name = patient_data['fake_NK1_last_name']
                    elif nk1_index == '2':
                        nk1_first_name = patient_data['fake_NK2_first_name']
                        nk1_last_name = patient_data['fake_NK2_last_name']
                    else:
                        nk1_first_name = patient_data['fake_NK1_first_name']
                        nk1_last_name = patient_data['fake_NK1_last_name']
                    
                    # Update the NK1 segment with unique data
                    if List[0][2] != '':
                        List[0][2] = replace_first_two_entries(
                                List[0][2], 
                                nk1_last_name.lower(), 
                                nk1_first_name.lower()
                            )
                    if List[0][4] != '':
                        List[0][4] = patient_data['fake_Address']
                    if List[0][5] != '':
                        List[0][5] = patient_data['fake_hphone']
                    modified_nk1 = '|'.join(List[0])

                    # Replace NK1 segment in the message
                    modified_message = modified_message.replace(str(segment), modified_nk1, 1)

                if segment_type == 'GT1':
                    List = split_message_lines(str(segment))
                    if List[0][3].strip() == ognk:
                        if List[0][3] != '':
                            List[0][3] = replace_first_two_entries(
                                List[0][3], 
                                patient_data['fake_NK1_last_name'].lower(), 
                                patient_data['fake_NK1_first_name'].lower()
                            )
                    else:
                        if List[0][3] != '':
                            List[0][3] = replace_first_two_entries(
                                    List[0][3], 
                                    patient_data['fake_GT1_last_name'].lower(), 
                                    patient_data['fake_GT1_first_name'].lower()
                                )
                    if List[0][5] != '':
                        List[0][5] = patient_data['fake_Address']
                    if List[0][6] != '':
                        List[0][6] = patient_data['fake_hphone']
                    modified_gt1 = '|'.join(List[0])
                    
                    # Replace PID segment in the message
                    modified_message = modified_message.replace(str(segment), modified_gt1, 1)
                else:
                    # For non-PID segments, sanitize any sensitive data
                    segment_text = str(segment)
                    sanitized_segment = sanitize_non_pid_segment(segment_text, patient_data)
                    
                    # Replace the segment in the modified message if changes were made
                    if sanitized_segment != segment_text:
                        modified_message = modified_message.replace(segment_text, sanitized_segment, 1)
        
        modified_messages.append(modified_message)
    
    # Write modified messages to output file
    with open(output_file, 'w') as f:
        for mod_msg in modified_messages:
            f.write(mod_msg + "\n")
    
    return f"Modified {len(modified_messages)} HL7 messages written to {output_file}"


# [All other existing functions remain unchanged: is_same_date, name_parse, etc.]

def main():
    input_file = 'raw.txt'
    filtered_file = 'filtered_raw.txt'  # New intermediate file
    output_mapping = 'output.txt'
    output_messages = 'fixed.txt'
    
    # First filter messages to keep only those with MRN
    filtered_input = filter_messages_with_mrn(input_file, filtered_file)
    
    # Then process the filtered messages
    patient_dict, message_map = extract_unique_patients(filtered_file, output_mapping)
    result = compile(filtered_file, patient_dict, message_map, output_messages)

if __name__ == "__main__":
    main()
